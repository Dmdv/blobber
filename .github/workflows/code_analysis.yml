name: Code_Analysis_N_Test

on:
  push:
  release:
    types:
      - published

env:
  BLOBBER_REGISTRY: ${{ secrets.BLOBBER_REGISTRY }}
  VALIDATOR_REGISTRY: ${{ secrets.VALIDATOR_REGISTRY }}

jobs:
  # build:
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - name: Install Go
  #       uses: actions/setup-go@v2
  #       with:
  #         go-version: 1.14.x
  #     - uses: actions/checkout@v2
  #     # In this step, this action saves a list of existing images,
  #     # the cache is created without them in the post run.
  #     # It also restores the cache if it exists.
  #     - uses: satackey/action-docker-layer-caching@v0.0.11
  #       # Ignore the failure of a step and avoid terminating the job.
  #       continue-on-error: true
  #     - name: Build
  #       run: |
  #         docker network create --driver=bridge --subnet=198.18.0.0/15 --gateway=198.18.0.255 testnet0
  #         ./docker.local/bin/build.blobber.sh
  # test:
  #   runs-on: ubuntu-20.04
  #   steps:
  #   - name: Install Go
  #     uses: actions/setup-go@v2
  #     with:
  #       go-version: 1.14.x
  #   - uses: actions/checkout@v2
  #   - name: Test
  #     run: make test

  # lint:
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - name: Install Go
  #       uses: actions/setup-go@v2
  #       with:
  #         go-version: 1.14.x
  #     - uses: actions/checkout@v2
  #     - name: Install golangci-lint
  #       run: |
  #         curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.38.0
  #         golangci-lint --version
  #     - name: Lint
  #       run: make lint


  # generated-files-integrity:
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - name: Install Go
  #       uses: actions/setup-go@v2
  #       with:
  #         go-version: 1.14.x
  #     - uses: actions/checkout@v2
  #     - name: Install dependencies
  #       run: |
  #         cd code/go/0chain.net/blobbercore
  #         sudo apt-get update
  #         sudo apt-get install -y protobuf-compiler
  #         go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway \
  #         github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2 \
  #         google.golang.org/protobuf/cmd/protoc-gen-go \
  #         google.golang.org/grpc/cmd/protoc-gen-go-grpc
  #         git reset --hard
  #     - name: Generate Files
  #       run: |
  #         cd code/go/0chain.net/blobbercore
  #         ./scripts/generate-grpc.sh
  #     - name: Fail if any file has changed
  #       run: if output=$(git status --porcelain) && [ -z "$output" ]; then exit 0; else git status; exit 1; fi;

  build-N-push-image:
    runs-on: ubuntu-20.04
    steps: 
      - uses: actions/checkout@v2

      - name: Get Branch
        id: get_branch
        run: |
          BRANCH=$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//-/g')
          SHORT_SHA=$(echo $GITHUB_SHA | head -c 8)
          echo ::set-output name=BRANCH::${BRANCH}
          echo ::set-output name=VERSION::${BRANCH}-${SHORT_SHA}
          #echo ::set-output name=INPUT_TAG::'{"latest_tag":"${VERSION}"}'
          echo "This workflow run is triggered by ${INPUT_TAG}."

      - name: Triggering build.yml for creating & pushing docker images.
        uses: convictional/trigger-workflow-and-wait@v1.3.0
        with:
          owner: 0chain
          repo: blobber
          github_token: ${{ secrets.CICD }}
          workflow_file_name: build1.yml #build.yml
          ref: ${{ steps.get_branch.outputs.BRANCH }}
          inputs: '{"latest_tag":${{  TAG  }} }'
          propagate_failure: true
          trigger_workflow: true
          wait_workflow: true
        env:
          TAG: ${{ steps.get_branch.outputs.VERSION }}
