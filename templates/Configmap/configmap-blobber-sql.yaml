apiVersion: v1
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: blobber-sql
data:
  00-create-user.sql: |-
    CREATE extension ltree;
    CREATE DATABASE blobber_meta;
    \connect blobber_meta;
    CREATE USER blobber_user WITH ENCRYPTED PASSWORD 'blobber';
    GRANT ALL PRIVILEGES ON DATABASE blobber_meta TO blobber_user;
  01-create-table.sql: "\\connect blobber_meta;\n\nCREATE OR REPLACE FUNCTION update_modified_column()
    \nRETURNS TRIGGER AS $$\nBEGIN\n    NEW.updated_at = now();\n    RETURN NEW; \nEND;\n$$
    language 'plpgsql';\n\n\nCREATE TABLE allocations(\n    id VARCHAR (64) PRIMARY
    KEY,\n    size BIGINT NOT NULL DEFAULT 0,\n    used_size BIGINT NOT NULL DEFAULT
    0,\n    owner_id VARCHAR(64) NOT NULL,\n    owner_public_key VARCHAR(256) NOT
    NULL,\n    expiration_date BIGINT NOT NULL,\n    allocation_root VARCHAR(255)
    NOT NULL DEFAULT '',\n    blobber_size BIGINT NOT NULL DEFAULT 0,\n    blobber_size_used
    BIGINT NOT NULL DEFAULT 0,\n    latest_redeemed_write_marker VARCHAR(255),\n    is_redeem_required
    BOOLEAN,\n    created_at TIMESTAMP NOT NULL DEFAULT NOW(),\n    updated_at TIMESTAMP
    NOT NULL DEFAULT NOW()\n);\n\nCREATE TRIGGER allocation_modtime BEFORE UPDATE
    ON allocations FOR EACH ROW EXECUTE PROCEDURE  update_modified_column();\n\nCREATE
    TABLE allocation_connections(\n    connection_id VARCHAR (64) PRIMARY KEY,\n    allocation_id
    VARCHAR(64) NOT NULL,\n    client_id VARCHAR(64) NOT NULL,\n    size BIGINT NOT
    NULL DEFAULT 0,\n    status INT NOT NULL DEFAULT 0,\n    created_at TIMESTAMP
    NOT NULL DEFAULT NOW(),\n    updated_at TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE
    TRIGGER allocation_connections_modtime BEFORE UPDATE ON allocation_connections
    FOR EACH ROW EXECUTE PROCEDURE  update_modified_column();\n\n\nCREATE TABLE allocation_changes(\n
    \   id BIGSERIAL PRIMARY KEY,\n    connection_id VARCHAR (64) REFERENCES allocation_connections(connection_id),\n
    \   operation VARCHAR(64) NOT NULL,\n    size BIGINT NOT NULL DEFAULT 0,\n    input
    TEXT,\n    created_at TIMESTAMP NOT NULL DEFAULT NOW(),\n    updated_at TIMESTAMP
    NOT NULL DEFAULT NOW()\n);\n\nCREATE TRIGGER allocation_changes_modtime BEFORE
    UPDATE ON allocation_changes FOR EACH ROW EXECUTE PROCEDURE  update_modified_column();\n\nCREATE
    TABLE reference_objects (\n    id BIGSERIAL PRIMARY KEY,\n    lookup_hash VARCHAR
    (64) NOT NULL,\n    path_hash VARCHAR (64) NOT NULL,\n    type VARCHAR(10) NOT
    NULL,\n    allocation_id VARCHAR(64) NOT NULL,\n    name VARCHAR(100) NOT NULL,\n
    \   path TEXT NOT NULL,\n    hash VARCHAR(64) NOT NULL,\n    num_of_blocks BIGINT
    NOT NULL DEFAULT 0,\n    parent_path TEXT,\n    level INT NOT NULL DEFAULT 0,\n
    \   custom_meta TEXT NOT NULL,\n    content_hash VARCHAR(64) NOT NULL,\n    size
    BIGINT NOT NULL DEFAULT 0,\n    merkle_root VARCHAR(64) NOT NULL,\n    actual_file_size
    BIGINT NOT NULL DEFAULT 0,\n    actual_file_hash VARCHAR(64) NOT NULL,\n    mimetype
    VARCHAR(64) NOT NULL,\n    write_marker VARCHAR(64) NOT NULL,\n    thumbnail_hash
    VARCHAR(64) NOT NULL,\n    thumbnail_size BIGINT NOT NULL DEFAULT 0,\n    actual_thumbnail_size
    BIGINT NOT NULL DEFAULT 0,\n    actual_thumbnail_hash VARCHAR(64) NOT NULL,\n
    \   encrypted_key TEXT,\n    created_at TIMESTAMP NOT NULL DEFAULT NOW(),\n    updated_at
    TIMESTAMP NOT NULL DEFAULT NOW(),\n    deleted_at TIMESTAMP\n);\n\nCREATE TRIGGER
    reference_objects_modtime BEFORE UPDATE ON reference_objects FOR EACH ROW EXECUTE
    PROCEDURE  update_modified_column();\n\nCREATE TABLE write_markers (\n    allocation_root
    VARCHAR (64) PRIMARY KEY,\n    prev_allocation_root VARCHAR (64) NOT NULL,\n    allocation_id
    VARCHAR(64) NOT NULL,\n    client_id VARCHAR(64) NOT NULL,\n    blobber_id VARCHAR(64)
    NOT NULL,\n    size BIGINT NOT NULL DEFAULT 0,\n    timestamp BIGINT NOT NULL,\n
    \   signature VARCHAR(256) NOT NULL,\n    status INT NOT NULL DEFAULT 0,\n    status_message
    TEXT,\n    redeem_retries INT NOT NULL DEFAULT 0,\n    close_txn_id VARCHAR(64),\n
    \   connection_id VARCHAR(64) NOT NULL,\n    client_key VARCHAR(256) NOT NULL,\n
    \   sequence BIGSERIAL UNIQUE,\n    created_at TIMESTAMP NOT NULL DEFAULT NOW(),\n
    \   updated_at TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TRIGGER write_markers_modtime
    BEFORE UPDATE ON write_markers FOR EACH ROW EXECUTE PROCEDURE  update_modified_column();\n\nCREATE
    TABLE read_markers (\n    client_id VARCHAR(64) NOT NULL PRIMARY KEY,\n    client_public_key
    VARCHAR(256) NOT NULL,\n    blobber_id VARCHAR(64) NOT NULL,\n    allocation_id
    VARCHAR(64) NOT NULL,\n    owner_id VARCHAR(64) NOT NULL,\n    timestamp BIGINT
    NOT NULL,\n    counter BIGINT NOT NULL DEFAULT 0,\n    signature VARCHAR(256)
    NOT NULL,\n    latest_redeemed_rm JSON,\n    redeem_required boolean,\n    latest_redeem_txn_id
    VARCHAR(64),\n    status_message TEXT,\n    created_at TIMESTAMP NOT NULL DEFAULT
    NOW(),\n    updated_at TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TRIGGER
    read_markers_modtime BEFORE UPDATE ON read_markers FOR EACH ROW EXECUTE PROCEDURE
    \ update_modified_column();\n\nCREATE TABLE challenges (\n    challenge_id VARCHAR(64)
    NOT NULL PRIMARY KEY,\n    prev_challenge_id VARCHAR(64),\n    seed BIGINT NOT
    NULL DEFAULT 0,\n    allocation_id VARCHAR(64) NOT NULL,\n    allocation_root
    VARCHAR(255),\n    responded_allocation_root VARCHAR(255),\n    status INT NOT
    NULL DEFAULT 0,\n    result INT NOT NULL DEFAULT 0,\n    status_message TEXT,\n
    \   commit_txn_id VARCHAR(64),\n    block_num BIGINT,\n    ref_id BIGINT,\n    validation_tickets
    JSON,\n    validators JSON,\n    last_commit_txn_ids JSON,\n    object_path JSON,\n
    \   sequence BIGSERIAL UNIQUE,\n    created_at TIMESTAMP NOT NULL DEFAULT NOW(),\n
    \   updated_at TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TRIGGER challenges_modtime
    BEFORE UPDATE ON challenges FOR EACH ROW EXECUTE PROCEDURE  update_modified_column();\n\n\nCREATE
    TABLE file_stats (\n    id BIGSERIAL PRIMARY KEY,\n    ref_id BIGINT UNIQUE REFERENCES
    reference_objects(id),\n    num_of_updates BIGINT,\n    num_of_block_downloads
    BIGINT,\n    num_of_challenges BIGINT,\n    num_of_failed_challenges BIGINT,\n
    \   last_challenge_txn VARCHAR(64),\n    created_at TIMESTAMP NOT NULL DEFAULT
    NOW(),\n    updated_at TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TRIGGER
    file_stats_modtime BEFORE UPDATE ON file_stats FOR EACH ROW EXECUTE PROCEDURE
    \ update_modified_column();"
  02-grant-priv.sql: |-
    \connect blobber_meta;

    GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO blobber_user;
    GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO blobber_user;
  03-add-allocation-prices.sql: |-
    \connect blobber_meta;

    ALTER TABLE allocations ADD COLUMN tx varchar (64) NOT NULL;

    CREATE UNIQUE INDEX idx_unique_allocations_tx ON allocations (tx);

    CREATE TABLE terms (
        id             bigserial,

        blobber_id     varchar(64) NOT NULL,
        allocation_tx  varchar(64) REFERENCES allocations (tx),

        read_price     bigint NOT NULL,
        write_price    bigint NOT NULL,

        PRIMARY KEY (id)
    );

    -- clients' pending reads / writes
    CREATE TABLE pendings (
        id             bigserial,

        client_id      varchar(64) NOT NULL,
        allocation_id  varchar(64) NOT NULL,
        blobber_id     varchar(64) NOT NULL,

        pending_read   bigint NOT NULL DEFAULT 0, -- number of pending blocks
        pending_write  bigint NOT NULL DEFAULT 0, -- number of pending bytes

        PRIMARY KEY (id)
    );

    CREATE UNIQUE INDEX idx_pendings_cab
        ON pendings (client_id, allocation_id, blobber_id);

    CREATE TABLE read_pools (
        pool_id        text NOT NULL, -- unique

        client_id      varchar(64) NOT NULL,
        blobber_id     varchar(64) NOT NULL,
        allocation_id  varchar(64) NOT NULL,

        balance        bigint NOT NULL,
        expire_at      bigint NOT NULL,

        PRIMARY KEY (pool_id)
    );

    CREATE UNIQUE INDEX idx_read_pools_cab
        ON read_pools (client_id, allocation_id, blobber_id);

    CREATE TABLE write_pools (
        pool_id        text NOT NULL, -- unique

        client_id      varchar(64) NOT NULL,
        blobber_id     varchar(64) NOT NULL,
        allocation_id  varchar(64) NOT NULL,

        balance        bigint NOT NULL,
        expire_at      bigint NOT NULL,

        PRIMARY KEY (pool_id)
    );

    CREATE UNIQUE INDEX idx_write_pools_cab
        ON write_pools (client_id, allocation_id, blobber_id);


    CREATE TABLE read_redeems (
        id             bigserial,

        read_counter   bigint NOT NULL,
        value          bigint NOT NULL,

        client_id      varchar(64) NOT NULL,
        blobber_id     varchar(64) NOT NULL,
        allocation_id  varchar(64) NOT NULL,

        PRIMARY KEY (id)
    );

    CREATE TABLE write_redeems (
        id             bigserial,

        signature      varchar(256) NOT NULL, -- write marker signature

        size           bigint NOT NULL,
        value          bigint NOT NULL,

        client_id      varchar(64) NOT NULL,
        blobber_id     varchar(64) NOT NULL,
        allocation_id  varchar(64) NOT NULL,

        PRIMARY KEY (id)
    );

    CREATE INDEX idx_write_redeems_signature ON write_redeems (signature);

    --
    -- grant again
    --

    GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO blobber_user;
    GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO blobber_user;
  04-add-on-cloud.sql: |-
    \connect blobber_meta;

    ALTER TABLE reference_objects ADD COLUMN on_cloud BOOLEAN DEFAULT FALSE;
  05-add-commit-meta-txns-table.sql: |-
    \connect blobber_meta;

    CREATE TABLE commit_meta_txns (
        ref_id BIGSERIAL NOT NULL,
        txn_id VARCHAR(64) NOT NULL,
        created_at TIMESTAMP NOT NULL DEFAULT NOW()
    );
  06-add-cleaned_up-column-to-allocations.sql: |-
    \connect blobber_meta;

    ALTER TABLE allocations
        ADD COLUMN cleaned_up boolean NOT NULL DEFAULT false;

    ALTER TABLE allocations
        ADD COLUMN finalized boolean NOT NULL DEFAULT false;
  07-terms-belongs-to-allocation-id.sql: |-
    \connect blobber_meta;

    BEGIN;

        ALTER TABLE terms
            ADD COLUMN allocation_id varchar(64) REFERENCES allocations (id);

        UPDATE terms AS t
        SET allocation_id = a.id
        FROM allocations AS a
        WHERE t.allocation_tx = a.tx;

        ALTER TABLE terms DROP COLUMN allocation_tx;

    COMMIT;

    BEGIN;
        -- drop unique index
        DROP INDEX idx_read_pools_cab;
        DROP INDEX idx_write_pools_cab;

        -- create non-unique
        CREATE INDEX idx_read_pools_cab
            ON read_pools (client_id, allocation_id, blobber_id);
        CREATE INDEX idx_write_pools_cab
            ON write_pools (client_id, allocation_id, blobber_id);
    COMMIT;

    -- for the commit_meta_txns
    GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO blobber_user;
  08-add-payer-id-to-allocations.sql: |-
    \connect blobber_meta;

    ALTER TABLE allocations ADD COLUMN payer_id VARCHAR(64) NOT NULL;
  09-add-suspend-column-to-read-markers.sql: |-
      \connect blobber_meta;
      BEGIN;
          -- if the suspend is equal to 'counter' column, then we don't send the marker
          -- even if its 'redeem_required' column is set to true; for a case, where we
          -- can't redeem a read_marker due to 'not enough tokens in related read pools'
          -- then we have to suspend redeeming to avoid 0chain DDoSing; in this case user
          -- can't read more files until his lock more tokens; and when hi locks more
          -- tokens, and reads a file, then the counter will be increased and a suspended
          -- read  marker will be awoken and redeemed
          --
          -- the case we can't redeem a read marker is a slow redeeming; there is
          -- 'read_lock_timeout' configuration, that means an expected timeout between
          -- a reading pre-redeeming and its redeeming; if redeeming works slow for a
          -- reason; then we can try to redeem a read_maker from read_pools already
          -- expired
          --
          ALTER TABLE read_markers
              ADD COLUMN suspend BIGINT NOT NULL DEFAULT -1;
          --
          -- we don't need to track pending reads anymore
          --
          ALTER TABLE pendings
              DROP COLUMN pending_read;
          --
          -- pending values has changed from tokens to number of block for read markers
          -- and size in bytes for write markers; we have to reset all of them to zero
          -- to avoid 'tokens * tokens' multiplication in pending tokens calculations
          -- (instead of 'size * tokens' or 'numBlocks * tokens')
          --
          -- (we are doing it in transaction to make sure it called once; since the
          -- alter table above, and drop table below fails next time and rolls back
          -- the transaction; thus the pending will not be reset next time, that's
          -- expected)
          UPDATE pendings SET pending_write = 0;
          --
          -- don't track every redeem, since update allocation or slow redeeming can
          -- break process; in such cases it requires workarounds; use pendings table
          -- to track pending redeems
          --
          DROP TABLE read_redeems CASCADE;
          DROP TABLE write_redeems CASCADE; -- with indices
      COMMIT;
  10-add-time_unit-column-to-allocations.sql: |-
      --
      -- Add column time_unit to allocations. Default is 48h.
      --

      -- pew-pew
      \connect blobber_meta;
      
      BEGIN;
          ALTER TABLE allocations
              ADD COLUMN time_unit BIGINT NOT NULL DEFAULT 172800000000000;
      COMMIT;
  11-add-payer_id-and-auth_tiket-columns-to-read_markers.sql: |-
      --
      -- add payer_id and auth_tiket columns to read_markers table
      --

      -- pew-pew
      \connect blobber_meta;

      BEGIN;
          ALTER TABLE read_markers ADD COLUMN payer_id VARCHAR(64) NOT NULL;
          ALTER TABLE read_markers ADD COLUMN auth_ticket JSON;
      COMMIT;
  12-add-attributes-column-to-reference_objects.sql: |-
      --
      -- Add who_pays column to reference_objects table.
      --

      -- pew-pew
      \connect blobber_meta;

      -- in a transaction
      BEGIN;
          ALTER TABLE reference_objects
              ADD COLUMN attributes JSON DEFAULT '{}'::jsonb;
      COMMIT;
  13-add-collaborators-table.sql: |-
      \connect blobber_meta;


      CREATE TABLE collaborators (
          ref_id BIGSERIAL NOT NULL,
          client_id VARCHAR(64) NOT NULL,
          created_at TIMESTAMP NOT NULL DEFAULT NOW()
      );

      GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO blobber_user;
  14-increase_owner_pubkey.sql: |-
      --
      -- Increase the char limit of owner_public_key from 256 to 512.
      --

      -- pew-pew
      \connect blobber_meta;

      -- in a transaction
      BEGIN;
          ALTER TABLE allocations
              ALTER COLUMN owner_public_key TYPE varchar(512);
          ALTER TABLE read_markers
              ALTER COLUMN client_public_key TYPE varchar(512);
          ALTER TABLE write_markers
              ALTER COLUMN client_key TYPE varchar(512);
      COMMIT;
  15-add-allocation-columns.sql: |-
     \connect blobber_meta;

      BEGIN;
          ALTER TABLE allocations ADD COLUMN repairer_id VARCHAR(64) NOT NULL;
          ALTER TABLE allocations ADD COLUMN is_immutable BOOLEAN NOT NULL;
      COMMIT;